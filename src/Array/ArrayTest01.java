package Array;

/**
 * Array
 *    1.java语言中的数组是一种引用数据类型。不属于基本数据类型。数组的父类是Object。
 *
 *    2.数组实际上是一个容器，可以同时容纳多个元素。（数组是一个数据的集合）
 *      数组：字面意思是"以至于数据"
 *
 *    3.数组中可以存储基本数据类型的数据，也可以存储引用数据类型的数据。
 *
 *    4.数组因为是引用类型，所以数组对象是在堆内存中。(数组存储在堆当中的)
 *      Person person1 = new Person();
 *      Person person2 = new Person();
 *
 *    5.数组在内存方面是怎样的一个图形。
 *    数组当中如果存储的是java对象的话，实际上存储的是对象的"引用（内存地址）"
 *
 *    6.数组一旦创建，在java中规定，长度不可变
 *
 *    7.数组的分类包括：一维数组，二维数组，三维数组，多维数组...（一维数组用的较多，二维数组偶尔使用）
 *
 *    8.所有的数组都有length()属性（java自带的），用来获取数组中元素个数
 *
 *    9.java中的数组要求数组中元素的类型统一，比如int类型数组只能存储int类型，Person类型数组只能存储Person类型。
 *
 *    10.数组在内存方面存储的时候，数组中的元素内存地址（存储的每一个元素都是有规则的挨着排列的）是连续的。
 *       这是数组存储元素的特点/特色。数组实际上是一种简单的数据结构。
 *
 *    11.所有的数组都是拿第一个元素的内存地址作为整个数组对象的内存地址
 *
 *    12.数组中每一个元素都是有下标的，下标从0开始，以1递增。最后一个元素的下标是：length-1
 *    下标非常重要，因为我们对数组中元素进行"存取"的时候，都需要通过下标来进行。
 *
 *    12.数组这种数据结构的优点和缺点是什么？
 *          优点：查询/查找/检索 某个下标上的元素时效率极高。可以说是查询效率最高的一个数据结构。
 *              为什么检索效率高？
 *                  第一：每一个元素的内存地址在空间存储上是连续的
 *                  第二：每一个元素类型相同，所以占用空间大小一样
 *                  第三：知道第一个元素内存地址，知道每一个元素占用空间的大小，又知道下标，所以通过一个数学
 *                  表达式就可以计算出某个下标上元素的内存地址。直接通过内存地址定位元素，所以数组的检索效率是最高的。
 *
 *                  数组中存储100个元素或者存储100w个元素，在元素查询/检索方面，效率是相同的，因为数组中元素查找的时候不会
 *                  一个一个找，是通过数学表达式计算出来的。（算出一个内存地址，直接定位的）。
 *
 *          缺点：
 *              第一：
 *                  由于为了保证数组中每个元素的内存地址连续，所以在数组上随机删除或者增加元素的时候效率较低
 *                  因为随机增删元素会涉及到后面元素统一向前或者向后位移的操作。
 *              第二：
 *                  数组不能存储大数据量，为什么？
 *                  因为很难在内存空间上找到一块特别大的连续的内存空间。
 *                  注意：对于数组中最后一个元素的增删是没有效率影响的
 *
 *      13.怎么声明/定义一个一维数组？
 *          语法格式：
 *          int[] array1;
 *          double[] array2;
 *          boolean[] array3;
 *          String[] array4;
 *          Object[] array5;
 *
 *       14.怎么初始化一个一维数组呢？
 *          包括两种方式：静态初始化一维数组，动态初始化一维数组。
 *          静态初始化一维数组：
 *              int[] array = {1，32，3，234，153};
 *          动态初始化一维数组：
 *              int[] array = new int[5];//这里的5表示数组的元素个数。
 *                                       //初始化一个5个长度的int类型数组，每个元素默认值为0
 *              String[] names = new String[6];//初始化6个长度的String类型数组，每个元素默认值为null
 *
 */
public class ArrayTest01 {
    public static void main(String[] args) {

        //使用静态初始化的方式声明一个int类型的数组
        int[] a1 = {1,3,5,32,23,23,3};

        // 所有的数组对象都又length属性
        System.out.println(a1.length);//7个

        // 数组中每一个元素都有下标，通过下标对数组中的元素进行存或者取
        System.out.println("第一个元素="+a1[0]);
        System.out.println("最后一个元素="+a1[a1.length-1]);

        //存/改
        //把第一个元素修改为111
        a1[0] = 111;
        //把最后一个元素修改为0
        a1[a1.length-1] =  0;
        System.out.println("第一个元素="+a1[0]);
        System.out.println("最后一个元素="+a1[a1.length-1]);

        //一维数组怎么遍历呢
        for (int i = 0; i < a1.length; i++) {
            System.out.println(a1[i]);
        }

//        System.out.println(a1[7]);//ArrayIndexOutOfBoundsException  数组下标越界异常

        //从最后一个元素遍历到第一个元素
        for (int j = a1.length-1; j >= 0 ; j--) {
            System.out.println(a1[j]);
        }
    }
}
