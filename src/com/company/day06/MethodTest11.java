package com.company.day06;

/**
 * 方法在执行过程中，在jvm中的内存是入和分配的呢，内存是如何变化的
 *     1.方法只定义不调用是不会执行的，并且也不会给该方法分配运行所属的内存空间、
 *     只有在调用这个方法的时候，才会动态的给这个方法分配所属的内存空间
 *
 *     2.在jvm内存划分上，有这样三块主要的内存空间（当然除了这三块之外还有其他的内存空间）：
 *          * 堆内存
 *          * 栈内存
 *          * 方法区内存
 *
 *     3.关于栈数据结构：
 *         * 栈：stack，是一种数据结构
 *         * 数据结构反映的是数据的存储形态
 *         * 数据结构是独立的学科，不属于任何编程语言的范畴，只不过在大多数编程语言中要使用数据结构
 *         * 作为程序员需要提前精通：数据结构+算法
 *         * java程序员在不精通数据结构和算法的前提下，也能进行java开发，因为java有一套庞大的类库支撑，别人写好了，直接调用
 *         * 常见的数据结构：数组，队列，栈，链表，二叉树，哈希表/散列表...
 *
 *     4.方法执行的时候代码片段存在哪里？方法执行的时候执行过程的内存在哪里分配
 *          * 方法代码片段属于.class字节码文件的一部分，字节码文件在类加载的时候，将其放到了方法区当中，所以JVM总的三块主要的内存空间中方法区内存
 *          最先有数据。存放了代码片段。（也就是说，.class文件在被JVM虚拟机类加载的时候，.class文件里面的方法被虚拟机放在了方法去中，那也就是方法区中最先有了数据）
 *          类加载器：ClassLoader
 *
 *          * 代码片段虽然在方法去内存当中只有一份，但是可以被重复调用，每一次调用这个方法的时候，需要给该方法分配独立的活动场所，在栈内存中分配
 *          [栈内存中分配方法运行的所属内存空间]
 *
 *     5.方法在调用的时候，会给该方法分配独立的内存空间，在栈中分配，此时发生压栈动作，方法结束后，给该方法分配的内存空间全部释放，此时发生弹栈动作
 *          * 压栈：给方法分配内存
 *          * 弹栈：释放该方法的内存空间
 *
 *     6.局部变量在"方法体"中声明，局部变量在运行阶段内存在栈中分配。
 *
 */
public class MethodTest11 {

    public static void main(String[] args) {
    }

}
