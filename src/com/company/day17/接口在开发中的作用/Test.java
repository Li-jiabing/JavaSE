package com.company.day17.接口在开发中的作用;

/**
 * 接口在开发中的作用
 * 注意：接口在开发中的作用，类似于多态在开发中的作用
 * 多态：面向抽象编程，不要面向具体编程。降低程序的耦合度。提高程序的扩展力。
 *      public class Master{
 *          public void feed(Dog d){}
 *          public void feed(Cat c){}
 *          假设又要养其他宠物，那么这个时候需要再加一个方法。（需要修改代码了）
 *          这样扩展力太差了，违背了OCP原则（对扩展开放，对修改关闭）
 *      }
 *
 *      public class Master{
 *          public void feed(Animal a){
 *              //面向Animal父类编程，父类是比子类更抽象的。
 *              //所以我门叫做面向抽象编程，不要面向具体编程。
 *              //这样程序的扩展里就强。
 *          }
 *      }
 *
 *      接口在开发中的作用？
 *          接口是不是完全抽象的？是的
 *          而我们以后正好要求，面向抽象编程。
 *          面向抽象编程这句话以后可以修改为：面向接口编程。
 *          有了接口就有了可插拔，可插拔表示扩展里很强。不是焊接死的。
 *          主办和内存条之间有插槽，这个插槽就是接口，内存条坏了，可以重新换一个，这叫做高扩展性，低耦合度。
 *
 *          接口在现实世界中是不是到处都是呢？
 *              usb接口
 *              螺栓和螺母之间有接口
 *              灯泡和灯扣之间有接口
 *              笔记本电脑和键盘之间有接口（usb接口是不是某个计算机协会制定的规范）
 *              接口干啥的？有什么用？
 *                  扩展性好，可插拔
 *              接口是一个抽象的概念
 *
 *           分析：中午去饭馆吃饭，这个过程中有接口吗？接口是谁
 *              接口是抽象的，这个情况下接口是菜单。（菜单上有一个抽象的接口照片：西红柿炒鸡蛋）
 *              谁面向接口调用（顾客面向菜单点菜，调用接口）
 *              谁负责实现这个接口（后台的厨师负责把菜做好，是接口的实现者）
 *              这个接口有什么用呢？
 *                  这个饭馆的菜单，让"顾客"和"后厨"解耦合了。
 *                  顾客不用找后厨，后厨不用找顾客，他们之间完全依靠这个抽象的菜单沟通。
 *
 *        接口可以解耦合，解开的是谁和谁的耦合？
 *          任何一个接口都有调用者和实现者
 *          接口可以将调用者和实现者解耦合
 *          调用者面向接口调用。
 *          实现者面向接口编写实现。
 */
public class Test {
    public static void main(String[] args) {
        //创建厨师对象
        FoodMenu fm = new ChinaCook();
        FoodMenu fm1 = new AmericaCook();
        //创建顾客对象
        Customer ct = new Customer(fm);
        Customer ct1 = new Customer(fm1);
        //通过顾客对象去点菜
        ct.Order();
        ct1.Order();

    }
}

/**
 * 总结抽象类和接口有什么区别？
 *  在这里我们只说一下抽象类和接口在语法上的区别
 *  至于以后抽象类和接口应该怎么进行选择，通过后面的项目去体会/学习
 *
 *  抽象类是半抽象的，接口是完全抽象的
 *
 *  抽象类中有构造方法，接口中没有构造方法
 *
 *  接口和接口之间支持多继承
 *  类和类之间只能单继承
 *
 *  一个类可以同时实现多个接口
 *  一个抽象类制衡继承一个类（单继承）
 *
 *  接口中只允许出现常量和抽象方法
 *
 *  这里先透露一个信息，以后接口使用的比接口多
 *  接口一般都是对行为的抽象
 */